version: '3.8'

services:
  market:
    container_name: market
    build: 
      context: ./Market
      dockerfile: Dockerfile
    command: "uvicorn --factory main:create_app --host=0.0.0.0 --reload --port 8000"
    volumes:
      - ./Market/app:/app
    ports:
      - "${MARKET_PORT}:8000"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017
      - MONGODB_DB_NAME=${MONGODB_DB_NAME}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_ORDERS_TOPIC=dim_orders
      - KAFKA_SALES_TOPIC=fact_sales
      - YOOKASSA_SHOP_ID=${YOOKASSA_SHOP_ID}
      - YOOKASSA_SECRET_KEY=${YOOKASSA_SECRET_KEY}
      - POSTGRES_DB_NAME=${POSTGRES_DB_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    env_file:
      - ".env"
    depends_on:
      - mongodb
      - kafka
      - postgres_database
      - redis_database
    networks:
      - backend
    restart: always

  mongodb:
    image: mongo:latest
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    depends_on:
      - prometheus
    networks:
      - backend

  postgres_database:
    container_name: postgres_database
    image: postgres:17.2
    environment:
      POSTGRES_DB: "${POSTGRES_DB_NAME}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - "${POSTGRES_DB_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - backend
    
  redis_database:
    image: redis:alpine3.21
    container_name: redis_database
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: /bin/sh -c "redis-server --requirepass $$REDIS_PASSWORD"
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
       - redis_data:/data
    restart: always
    networks:
      - backend

volumes:
  mongodb_data:
  prometheus_data:
  grafana_data:
  postgres_data:
  redis_data:

networks:
  backend:
    driver: bridge